name: Build OpenFFBoard firmware

# Controls when the workflow will run
on:
  push:
    branches: 
      - master
      - development
      - feature/*
  pull_request:
    branches:
      - master
      - development

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Can be called
  workflow_call:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build firmware
  Build_firmware:
    name: Build firmware
    strategy:
        fail-fast: false
        matrix:
          target: ['F411RE', 'F407VG','F407VG_DISCO'] # Targets to build

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - {uses: ./.github/actions/build-firmware, with: {target: '${{ matrix.target }}', path: 'Output'}}

      - uses: actions/upload-artifact@v3
        with:
          name: OpenFFBoard-Firmware-${{ matrix.target }}
          path: ./Firmware/Output

  Build-ESP32SX:
    strategy:
      fail-fast: false
      matrix:
        target: ['esp32s2', 'esp32s3'] # Targets to build
    runs-on: ubuntu-latest
    env:
      PROJECT_PATH: Firmware/Targets/ESP32SX
    container: espressif/idf:release-v4.4
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: esp-idf build
      run: |
        pwd
        ls -al
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git log -n1
        cd /opt/esp/idf
        git checkout c29343eb94d
        git submodule update --init --recursive
        tools/idf_tools.py --non-interactive install cmake
        ./install.sh
        source ./export.sh
        cd $GITHUB_WORKSPACE/$PROJECT_PATH
        idf.py set-target ${{ matrix.target }}
        idf.py build
        esptool.py --chip ${{ matrix.target }} merge_bin -o build/OpenFFBoard-Firmware-${{ matrix.target }}.bin --flash_mode dio --flash_size 4MB 0x1000 build/bootloader/bootloader.bin 0x10000 build/openffboard.bin 0x8000 build/partition_table/partition-table.bin
      shell: bash

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.0.0
      with:
        # Artifact name
        name: OpenFFBoard-Firmware-${{ matrix.target }}
        # A file, directory or wildcard pattern that describes what to upload
        path: |
          Firmware/Targets/ESP32SX/build/OpenFFBoard-Firmware-*.bin
        retention-days: 90

  # Release:
  #   needs: [Build_firmware] # Requires build first
  #   name: Release if tagged
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v3
  #       with:
  #         path: etc/usr/artifacts/

  #     - name: Display structure of downloaded files
  #       run: ls -R
  #       working-directory: etc/usr/artifacts/

  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         body_path: ${{ github.workspace }}/CHANGELOG.txt
  #         body: "Release notes coming soon"

